# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
version: "1.0"
module:
  meta:
    type: remote
  spec:
    functions:
      - function:
          meta:
            kind: http
            type: ridesharing/geocell
          spec:
            endpoint: http://go-worker:8000/statefun
            states:
              - drivers
            maxNumBatchRequests: 500
            timeout: 2min
      - function:
          meta:
            kind: http
            type: ridesharing/driver
          spec:
            endpoint: http://go-worker:8000/statefun
            states:
              - ride
              - location
            maxNumBatchRequests: 500
            timeout: 2min
      - function:
          meta:
            kind: http
            type: ridesharing/passenger
          spec:
            endpoint: http://go-worker:8000/statefun
            maxNumBatchRequests: 500
            timeout: 2min
      - function:
          meta:
            kind: http
            type: ridesharing/ride
          spec:
            endpoint: http://go-worker:8000/statefun
            states:
              - passenger
              - driver
            maxNumBatchRequests: 500
            timeout: 2min
    ingresses:
      - ingress:
          meta:
            type: statefun.kafka.io/routable-protobuf-ingress
            id: ridesharing/from-driver
          spec:
            address: kafka-broker:9092
            consumerGroupId: from-driver-id
            topics:
              - topic: from-driver
                typeUrl: com.googleapis/ridesharing.InboundDriverMessage
                targets:
                  - ridesharing/driver
      - ingress:
          meta:
            type: statefun.kafka.io/routable-protobuf-ingress
            id: ridesharing/from-passenger
          spec:
            address: kafka-broker:9092
            consumerGroupId: from-passenger-id
            topics:
              - topic: from-driver
                typeUrl: com.googleapis/ridesharing.InboundPassengerMessage
                targets:
                  - ridesharing/passenger
    egresses:
      - egress:
          meta:
            type: statefun.kafka.io/generic-egress
            id: ridesharing/to-driver
          spec:
            address: kafka-broker:9092
            deliverySemantic:
              type: at-least-once
      - egress:
          meta:
            type: statefun.kafka.io/generic-egress
            id: ridesharing/to-passenger
          spec:
            address: kafka-broker:9092
            deliverySemantic:
              type: at-least-once
